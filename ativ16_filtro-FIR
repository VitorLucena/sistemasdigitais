/*
 * GccApplication1.c
 *
 * Created: 16/05/2019 14:51:28
 * Author : Vitor
 */ 

#define F_CPU 16000000UL // 1Mhz

#include <avr/io.h>
#include <stdlib.h>
#include <math.h>
#include <avr/interrupt.h>

#define TAM 40
#define ALPHA 0.0846
#define BETA 12

 volatile unsigned char x = 0 ;
 volatile unsigned char oldx = 0 ;
 
 double y_sum;
 double x_vector[TAM];
 double y_vector[TAM];
 volatile double h_vector[TAM];
 volatile double o_vector[TAM];

void saida();

int main()
{	 
	 for(int i = 0; i<=(TAM-1);i++){
		 double j = -i/BETA;
		 h_vector[i] = ALPHA*exp(j);
	 }
	
//---------Setup I/O
		DDRD = 0b11111100; //6 bits de saída para rede R2R( PD2 à PD7)
		DDRB = 0b00001111; //2 bits de saída para rede R2R( PB0 e PB1)
		DDRC = 0b11111110; // Seletor das ondas (PA0 e PA1)
	   
	//setup adc
	
	ADMUX = 0;
	ADCSRA = 0b11101010; //by 2 division
	ADCSRB = 0;
	   
	   sei();
        
    while (1) 
    {
		saida();
   } 
}

ISR(ADC_vect){
	
	  x_vector[0] = ADC;
	  y_vector[0] = x_vector[0]*h_vector[0];
	  y_sum = y_vector[0];
	  for(int i=1;i<=(TAM-1);i++){
		  x_vector[i] = o_vector[i-1];
		  y_vector[i] = x_vector[i]*h_vector[i];
		  y_sum = y_sum+y_vector[i];
	  }
	  for (int i=0;i<=(TAM-2);i++){
		  o_vector[i]=x_vector[i];
	  }
	  
	x = y_sum;
	ADCSRA = 0b11101010; //by 2 division
	
	return;
}

void saida(){
	
	if(x != oldx){
		oldx  = x;
	unsigned char x1 = x;
	unsigned char x2 = x;

		x1 = x1*4 ; //Deslocando 2 para esquerda
		x2 = x2/64; //Deslocando 6 para direita

		PORTD = x1;
		PORTB = x2;
	}
	return ;
}

;troco de moeda
;liga led, varia valor a ser trocado a partir de potenciometro
;pisca led, varia valores nos cofres a partir de potenciometro, apos o botao ser pressionado por 1s
;3 botoes, 1-up,2-down,3-varia posicao
.include "m328pdef.inc" 
.org 0x0000 rjmp setup

setup:
ldi r31, 1
ldi r30, 76

ldi r16,5
sts 0xA015,r16
ldi r16,0
sts 0xA014,r16
ldi r16,14
sts 0xA013,r16
ldi r16,8
sts 0xA012,r16
ldi r16,5
sts 0xA011,r16
ldi r16,10
sts 0xA010,r16

troco:
clr r16
lds r17,0xA015

centena:
cpi r31,0
breq dezena_st
cpi r17,0
breq dezena_st
subi r31,1
subi r17,1
inc r16
rjmp centena

dezena_st:
;sts 0xA025,r16
mov r29,r16
mov r24,r16
lds r17,0xA015
sub r17,r16
sts 0xA015,r17
clr r16
lds r17,0xA014
dezena:
cpi r30,50
brlt vcinco_st
cpi r17,0
breq vcinco_st
subi r30,50
subi r17,1
inc r16
rjmp dezena

vcinco_st:
;sts 0xA024,r16
mov r28,r16
lds r17,0xA014
sub r17,r16
sts 0xA014,r17
clr r16
lds r17, 0xA013
vcinco:
cpi r30,25
brlt mdez_st
cpi r17,0
breq mdez_st
subi r30,25
subi r17,1
inc r16
rjmp vcinco

mdez_st:
;sts 0xA023,r16
mov r27,r16
lds r17,0xA013
sub r17,r16
sts 0xA013,r17
clr r16
lds r17, 0xA012
mdez:
cpi r30,10
brlt mcinco_st
cpi r17,0
breq mcinco_st
subi r30,10
subi r17,1
inc r16
rjmp mdez

mcinco_st:
;sts 0xA022,r16
mov r26,r16
lds r17,0xA012
sub r17,r16
sts 0xA012,r17
clr r16
lds r17, 0xA011
mcinco:
cpi r30,5
brlt mum_st
cpi r17,0
breq mum_st
subi r30,5
subi r17,1
inc r16
rjmp mcinco

mum_st:
;sts 0xA021,r16
mov r25,r16
lds r17,0xA011
sub r17,r16
sts 0xA011,r17
clr r16
lds r17, 0xA010
mum:
cpi r30,0
breq zero_st
cpi r17,0
breq zero_st
subi r30,1
subi r17,1
inc r16
rjmp mum

zero_st:
;sts 0xA020,r16
mov r24,r16
lds r17,0xA010
sub r17,r16
sts 0xA010,r17


wait:
ldi r18,2
comp:
    cpi r18, 0x02			;compara o contador com 2 
    breq loadA				;caso seja a comparação verdadeira salta para loadA
    cpi r18, 0x01			;compara o contador com 1 
    breq loadB				;caso seja a comparação verdadeira salta para loadB
    cpi r18, 0x00			;compara o contador com 0 
    breq loadC				;caso seja a comparação verdadeira salta para loadC
loadA:
    dec r18					;decrementa o contador para que na proxima execusão seja loadB
    cbi PortB, 0			;muda para 1 o bit 2 de PORTB (transistor 1)
    sbi PortB, 1			;muda para 0 o bit 3 de PORTB (transistor 2)
    sbi PortB, 2			;muda para 0 o bit 4 de PORTB (transistor 3)
    out PortD, r20			;imprime no display A o valor que está em r20
	call delay0
    call sete_seg				;depois de retornar da escrita pula para a comparação novamente
   rjmp comp
loadB:
    dec r18					;decrementa o contador para que na proxima execusão seja loadC
    sbi PortB, 0			;muda para 0 o bit 2 de PORTB (transistor 1)
    cbi PortB, 1			;muda para 1 o bit 3 de PORTB (transistor 2)
    sbi PortB, 2			;muda para 0 o bit 4 de PORTB (transistor 3)
    out PortD, r21			;imprime no display B o valor que está em r21
	call delay0
       call sete_seg				;depois de retornar da escrita pula para a comparação novamente
rjmp comp
loadC:
    ldi r18, 0x02			;carrega o contador novamente para o ciclo recomeçar em loadA
    sbi PortB, 0			;muda para 0 o bit 2 de PORTB (transistor 1)
    sbi PortB, 1			;muda para 0 o bit 3 de PORTB (transistor 2)
    cbi PortB, 2			;muda para 1 o bit 4 de PORTB (transistor 3)
    out PortD, r22			;imprime no display C o valor que está em r22
	call delay0
    call sete_seg				;depois de retornar da escrita pula para a comparação novamente
  rjmp comp

rjmp wait

botao:
in r23,PINB
sbrs r23,5
call bup

in r23,PINB
sbrs r23,4
call bdown
ret

bup:
cpi r23,5
breq zera_23
inc r23
ret
zera_23:
ldi r23,0
ret

bdown:
cpi r23,0
breq cinco_23
subi r23,1
ret
cinco_23:
ldi r23,5
ret

sete_seg:
	cpi r16,0
	breq zero
	cpi r16,1
	breq um
	cpi r16,2
	breq dois
	cpi r16,3
	breq tres
	cpi r16,4
	breq quatro
	cpi r16,5
	breq cinco
	cpi r16,6
	breq seis
	cpi r16,7
	breq sete
	cpi r16,8
	breq oito
	cpi r16,0
	breq nove
zero:
	ldi r17, 0b11111100
	ret
um:
	ldi r17, 0b00100100
	rret
dois:
	ldi r17, 0b10111010
	ret
tres:
	ldi r17, 0b10101110
	ret
quatro:
	ldi r17, 0b01100110
	ret
cinco:
	ldi r17, 0b11001110
	ret
seis:
	ldi r17, 0b11011110
	ret
sete:
	ldi r17, 0b10100100
	ret
oito:
	ldi r17, 0b11111110
	ret
nove:
	ldi r17, 0b11100110
	ret
	
delay0:
     dec r16
	 cp r16,r17
	 brne delay0
	 ldi r16,255
	 rjmp delay1
delay1:
     dec r16
	 cp r16,r17
	 brne delay1
	 ret
	 
